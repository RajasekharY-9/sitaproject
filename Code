---------------------------------------

public interface UserRepository {
    List<User> getAllUsers();
    User getUserByUserId(String userId);
    void saveUser(User user);
}
===================
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.stereotype.Repository;

import java.util.List;

@Repository
public class JdbcUserRepository implements UserRepository {

    private final JdbcTemplate jdbcTemplate;

    @Autowired
    public JdbcUserRepository(JdbcTemplate jdbcTemplate) {
        this.jdbcTemplate = jdbcTemplate;
    }

    @Override
    public List<User> getAllUsers() {
        String sql = "SELECT * FROM User";
        return jdbcTemplate.query(sql, (rs, rowNum) ->
                new User(
                        rs.getString("User_Pk_Id"),
                        rs.getString("User_Id"),
                        rs.getString("Direction_Id"),
                        rs.getString("Direction_Cycle"),
                        rs.getString("Company_Code"),
                        rs.getTimestamp("Created_DateTime").toLocalDateTime(),
                        rs.getTimestamp("Updated_DateTime").toLocalDateTime()
                )
        );
    }

    @Override
    public User getUserByUserId(String userId) {
        String sql = "SELECT * FROM User WHERE User_Id = ?";
        return jdbcTemplate.queryForObject(sql, new Object[]{userId}, (rs, rowNum) ->
                new User(
                        rs.getString("User_Pk_Id"),
                        rs.getString("User_Id"),
                        rs.getString("Direction_Id"),
                        rs.getString("Direction_Cycle"),
                        rs.getString("Company_Code"),
                        rs.getTimestamp("Created_DateTime").toLocalDateTime(),
                        rs.getTimestamp("Updated_DateTime").toLocalDateTime()
                )
        );
    }

    @Override
    public void saveUser(User user) {
        String sql = "INSERT INTO User (User_Pk_Id, User_Id, Direction_Id, Direction_Cycle, Company_Code) VALUES (?, ?, ?, ?, ?)";
        jdbcTemplate.update(sql,
                user.getUserPkId(),
                user.getUserId(),
                user.getDirectionId(),
                user.getDirectionCycle(),
                user.getCompanyCode()
        );
    }
}
====================
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
public class UserController {

    private final UserRepository userRepository;

    @Autowired
    public UserController(UserRepository userRepository) {
        this.userRepository = userRepository;
    }

    @GetMapping("/users")
    public ResponseEntity<List<User>> getAllUsers() {
        List<User> users = userRepository.getAllUsers();
        return ResponseEntity.ok(users);
    }

    @GetMapping("/users/{userId}")
    public ResponseEntity<User> getUserByUserId(@PathVariable String userId) {
        User user = userRepository.getUserByUserId(userId);
        if (user != null) {
            return ResponseEntity.ok(user);
        } else {
            return ResponseEntity.notFound().build();
        }
    }

    @PostMapping("/users")
    public ResponseEntity<String> addUser(@RequestBody User user) {
        userRepository.saveUser(user);
        return ResponseEntity.ok("User added successfully");
    }
}


  
==========================================================

import javax.persistence.*;

@Entity
@Table(name = "User")
public class User {

    @Id
    @Column(name = "User_Pk_Id")
    private String userPkId;

    @Column(name = "User_Id")
    private String userId;

    @Column(name = "Direction_Id")
    private String directionId;

    @Column(name = "Direction_Cycle")
    private String directionCycle;

    @Column(name = "Company_Code")
    private String companyCode;

    // Constructors, Getters, Setters
}
